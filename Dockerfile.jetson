# FROM osrf/ros:noetic-desktop
FROM nvcr.io/nvidia/l4t-base:r35.4.1

# First, update without the key to ensure apt works
# RUN apt-get update || true

# Install key management tools and Python pip first
RUN apt-get update && apt-get install -y \
    curl \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    gnupg2 \
    lsb-release \
    python3-pip \
    git \
    python3-rosdep \
    ros-noetic-ros-base \
    ros-noetic-std-msgs \
    libqt5gui5 \
    libqt5webkit5 \
    libqt5test5 \
    xvfb \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Clean up existing keys properly
RUN rm -f /etc/apt/sources.list.d/ros*.list && \
    apt-key del F42ED6FBAB17C654 || true

# Add the updated key using the current method
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | apt-key add -

# Add ROS repository
RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list

# Update and install ROS dependencies
# RUN apt-get update && apt-get install -y \
#     python3-rosdep \
#     ros-noetic-ros-base \
#     ros-noetic-std-msgs \
#     && rm -rf /var/lib/apt/lists/*

# Upgrade pip to the latest version
RUN pip3 install --upgrade pip

RUN pip3 install --no-cache-dir protobuf==3.19.6

# Instalasi package Python yang dibutuhkan dengan versi spesifik
# RUN pip3 install --no-cache-dir \
#     tensorflow==2.10.1 \
#     tensorflow-addons \
#     tensorflow-estimator \
#     tensorflow-io-gcs-filesystem \
#     wheel \
#     matplotlib \
#     matplotlib-inline \
#     opencv-python \
#     pillow \
#     protobuf \
#     tensorboard \
#     tensorboard-data-server \
#     tensorboard-plugin-wit \
#     tensorflow\
#     tensorflow-addons \
#     tensorflow-estimator \
#     tensorflow-io-gcs-filesystem \
#     wheel

RUN pip3 install --no-cache-dir -i https://pypi.org/simple --upgrade --use-deprecated=legacy-resolver \
    tensorflow==2.10.1 \
    tensorflow-addons \
    tensorflow-estimator \
    tensorflow-io-gcs-filesystem \
    wheel \
    matplotlib \
    matplotlib-inline \
    opencv-python \
    pillow \
    tensorboard \
    tensorboard-data-server \
    tensorboard-plugin-wit

# Now we can use pip3 to install Firebase and other packages
RUN pip3 install --no-cache-dir firebase-admin
RUN pip3 install --no-cache-dir pyserial
RUN pip3 install --no-cache-dir numpy
# RUN pip3 install --no-cache-dir opencv-python

# Install ROS Python packages
RUN pip3 install --no-cache-dir rospkg catkin_pkg

# Install YOLOv9 dependencies
# RUN pip3 install --no-cache-dir pandas matplotlib seaborn scipy tqdm pyyaml IPython

# # Install a smaller CPU-only PyTorch for build purposes
# RUN pip3 install --no-cache-dir torch==1.10.0+cpu torchvision==0.11.1+cpu -f https://download.pytorch.org/whl/torch_stable.html || \
#     echo "PyTorch installation failed, but continuing build..."

# Clone YOLOv9 repository
WORKDIR /home
# RUN git clone https://github.com/WongKinYiu/yolov9.git

# Install system libraries yang dibutuhkan OpenCV
# RUN apt-get update && apt-get install -y \
#     libgl1-mesa-glx \
#     libglib2.0-0 \
#     libsm6 \
#     libxext6 \
#     libxrender-dev \
#     && rm -rf /var/lib/apt/lists/*
# Create and set working directory
WORKDIR /home/ros_ws

# Copy Firebase credentials
COPY mlff-firebase-key.json /home/ros_ws/

# # Copy files
COPY bismillah_pengujian_fixed.py /home/ros_ws/
COPY subscriber.py /home/ros_ws/
COPY sensor.py /home/ros_ws/
COPY launch.sh /home/ros_ws/
COPY entrypoint.sh /entrypoint.sh
COPY waskita_ent1.mp4 /home/ros_ws/waskita_ent1.mp4
COPY Final_50k/inference_graph/saved_model /home/ros_ws/Final_50k/inference_graph/saved_model

# # Make scripts executable
RUN chmod +x /entrypoint.sh
RUN chmod +x /home/ros_ws/launch.sh

# Setup display
ENV QT_X11_NO_MITSHM=1
ENV DISPLAY=:99

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]